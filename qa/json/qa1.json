[
  {
    "question": "谈谈性能优化问题",
    "answer": "代码层面：\n一、避免使用 css 表达式，避免使用高级选择器，通配选择器。\n二、缓存利用：缓存 Ajax，使用 CDN，使用外部 js 和 css 文件以便缓存，添加Expires 头，服务端配置 Etag，减少 DNS 查找等\n三、请求数量：合并样式和脚本，使用 css 图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。\n四、请求带宽：压缩文件，开启 GZIP\n\n                    "
  },
  {
    "question": "ES6的了解",
    "answer": "新增模板字符串（为 JavaScript 提供了简单的字符串插值功能）、箭头函数（操作符左边为输入的参数，而右边则是进行的操作以及返回的值Inputs=>outputs 。）、 for-of （用来遍历数据—例如数组中的值。） arguments对象可被不定参数和默认参数完美代替。 ES6 将 promise 对象纳入规范，提供了原生的 Promise 对象。增加了 let 和 const 命令，用来声明变量。增加了块级作用域。let 命令实际上就增加了块级作用域。ES6 规定， var命令和 function 命令声明的全局变量，属于全局对象的属性； let 命令、const 命令、 class 命令声明的全局变量，不属于全局对象的属性。。还有就是引入 module 模块的概念\n                    "
  },
  {
    "question": "你觉得jQuery或zepto源码有哪些写的好的地方",
    "answer": "jQuery 源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染，然后通过传入 window 对象参数，可以使 window 对象作为局部变量使用，好处是当 jquery 中访问 window 对象的时候，就不用将作用域链退回到顶层作用域了，从而可以更快的访问 window 对象。同样，传入undefined 参数，可以缩短查找 undefined 时的作用域链。\n                    "
  },
  {
    "question": "移动端性能优化",
    "answer": "尽量使用 css3动画，开启硬件加速。\n• 适当使用 touch 事件代替 click 事件。\n• 避免使用 css3 渐变阴影效果。\n• 可以用 transform: translateZ(0) 来开启硬件加速。\n• 不滥用 Float。Float在渲染时计算量比较大，尽量减少使用\n• 不滥用 Web字体。Web字体需要下载，解析，重绘当前页面，尽量减少使用。\n• 合理使用 requestAnimationFrame动画代替 setTimeout\n• CSS中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发 GPU渲染，请合理使用。过渡使用会引发手机过耗电增加\n• PC端的在移动端同样适用\n\n                    "
  },
  {
    "question": "代码层面的优化",
    "answer": "用 hash-table 来优化查找\n少用全局变量\n用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript性能\n用 setTimeout 来避免页面失去响应\n缓存 DOM 节点查找的结果\n避免使用 CSS Expression\n避免全局查询\n避免使用 with(with 会创建自己的作用域，会增加作用域链长度) 多个变量声明合并\n避免图片和 iFrame 等的空 Src。空 Src 会重新加载当前页面，影响速度和效率 尽量避免写在 HTML标签中写 Style属性\n\n                    "
  },
  {
    "question": "渐进增强和优雅降级",
    "answer": "渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。 \n                    "
  },
  {
    "question": "说说你对作用域链的理解",
    "answer": "作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到 window 对象即被终止，作用域链向下访问变量是不被允许的。 \n                    "
  },
  {
    "question": "二次请求三次握手",
    "answer": "二次请求三次握手\n1. 在浏览器中输入url\n2.应用层DNS解析域名\n3.应用层客户端发送HTTP请求\n4.传输层TCP传输报文\n5.网络层IP协议查询MAC地址\n6.数据到达数据链路层\n7.服务器接收数据\n8.服务器响应请求\n9. 服务器返回相应文件 \n                    "
  },
  {
    "question": "谈谈你对webpack的看法",
    "answer": "WebPack 是一个模块打包工具，你可以使用 WebPack 管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包 Web 开发中所用到的 HTML、JavaScript、CSS 以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源， webpack 有对应的模块加载器。 webpack 模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源。 \n                    "
  },
  {
    "question": "promise常用的几种方法",
    "answer": "promise\n   .then  成功返回执行\n   .catch    失败返回执行\n   .finally    成功和失败都会返回执行\n                    "
  },
  {
    "question": "6种this的指向",
    "answer": "\n                    "
  },
  {
    "question": "超出文字显示省略号",
    "answer": "\n                    "
  },
  {
    "question": "简述一下src与href的区别",
    "answer": "src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。\nsrc是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。\n<script src =”js.js”></script>\n当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。\nhref是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加\n<link href=”common.css” rel=”stylesheet”/>\n那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。 \n                    "
  },
  {
    "question": "CSS画出一个三角形",
    "answer": "<div class=\"czl\"></div>\n \n                    "
  },
  {
    "question": "JS有哪些内置对象",
    "answer": "数据封装类对象：Object 、Array 、Boolean 、 Number 和 String\n\n其它对象：Function 、Arguments、Math、Date、RegExp、Error、\n                    "
  },
  {
    "question": "数组去重复值",
    "answer": "es6\nvar arr = new Set(数组)\nvar arr2 = Array.from(arr)\n\n原生\nvar arr = [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 6, 5, 8, 5, 4, 5, 10, 15, 5, 8, 20, 8,20,5,7]\nvar all = []\nfor (var i = 0; i < arr.length; i++) {\nif (all.indexOf(arr[i]) == -1 ) {\nall.push(arr[i])\n} } \n                    "
  },
  {
    "question": "JQuery一个对象可以同时绑定多个事件",
    "answer": "bind() 方法为被选元素添加一个或多个事件处理程序，并规定事件发生时运行的函数。\non() 方法事件处理程序到当前选定的jQuery对象中的元素。 \n                    "
  },
  {
    "question": "['1','2','3'].map(parseInt)返回",
    "answer": "['1','2','3'].map(parseInt)\n\n猜测是由于parseInt(string, radix) 的参数radix必须介于2~36之间，而且字符串string中的数字不能大于radix才能正确返回数字结果值。\n\nparseInt('1',0) = 1,\nparseInt('2',1) = NaN,\nparseInt('3',2) = NaN, \n                    "
  },
  {
    "question": "行内元素，块级元素，空元素有哪些",
    "answer": "（1）行内元素有：a b  span  img  input select  strong\n（2）块级元素有： div ul ol li dl dt dd h1 h2 h4...p\n（3）常见的空元素：<br><hr><img><input><link><meta>\n         鲜为人知的是： <area>，<base><col><command><embed><keygen><param><source><track><wbr> \n                    "
  },
  {
    "question": "CSS中link和@import的区别是?",
    "answer": "一、Link属于html标签，而@import是CSS中提供的\n二、在页面加载的时候，link会同时被加载，而@import引用的CSS会在页面加载完成后才会加载引用的CSS\n三、@import只有在ie5以上才可以被识别，而link是html标签，不存在浏览器兼容性问题\n四、Link引入样式的权重大于@import的引用（@import是将引用的样式导入到当前的页面中） \n                    "
  },
  {
    "question": "div+css的布局较table布局有什么优点？",
    "answer": "1、改版的时候更方便 只要改css文件。\n2、页面加载速度更快、结构化清晰、页面显示简洁。\n3、表现与结构相分离。\n4、易于优化（seo）搜索引擎更友好，排名更容易靠前。 \n                    "
  },
  {
    "question": "JavaScript之详述闭包导致的内存泄露",
    "answer": "一、内存泄露\n1. 定义：一块被分配的内存既不能使用，也不能回收。从而影响性能，甚至导致程序崩溃。\n2. 起因：JavaScript的垃圾自动回收机制会按一定的策略找出那些不再继续使用的变量，释放其占有的内存。然而由于一些原因导致在这种机制下内存管理器不能正确解读JavaScript变量的生命周期，从而没有释放其内存，而也没有再被使用。  循环引用是导致以上情况的主要原因之一。 \n\n二、循环引用 \n1. 定义：两个对象的互相引用。  IE和Mozilla Firefox均使用引用计数的策略对变量和内存进行管理，当出现循环引用时，各对象的引用数至少为1，在不进行手动设置的情况下，将无法被释放。  闭包实际上非常容易造成JavaScript对象和DOM对象的隐蔽循环引用。\n\n2.解决方法： 常用的解决方法就是在JavaScript代码段运行完之时将形成循环引用的JavaScript对象手动设置为空，切断引用。\n\n                    "
  },
  {
    "question": "如何对网站进行性能优化",
    "answer": "1、尽可能减少HTTP请求：图片合并 （css sprites），Js脚本文件合并、css文件合并\n2、减少DNS查询\n3、将css放在页面最上面，将js放在页面最下面\n       css放在页面最上面可以防止页面出现白屏、闪跳的现象，即减少页面的首屏出现时间。js的下载和执行会阻塞Dom树的构建（严谨地说是中断了Dom树的更新），所以script标签放在首屏范围内的HTML代码段里会截断首屏的内容。而且js中可能会对DOM节点进行操作，而这时代码是自上向下进行执行的，这样会造成js对相应的元素操作不了。所以js放在页面的最下面\n4、压缩js和css\n       减少文件体积，去除不必要的空白符、格式符、注释（即对代码进行格式化）\n5、把js和css提取出来放在外部文件中\n       这一条要灵活运用，把js和css提取出来放在外部文件的优点是：减少html体积，提高了js和css的复用性，提高日后的可维护性\n       缺点：增加了http请求，不过这一点可以通过缓存来解决\n       什么情况下将js和css写在页面内呢，可以分为几种情况：js和css代码比较少；这个页面不怎么会访问\n6、避免重定向\n       重定向就是用户请求的页面被转移到了别的地方，浏览器向服务请请求一个页面，服务器告诉浏览器请求的页面已经被转移到另外一个页面，并告知另一个页面地址，浏览器就再发送请求到重定向的地址。这样会增加服务器和浏览器之间的往返次数，影响网站性能。\n       重定向状态码有：301永久重定向   302临时重定向。304 not modified  并不是真的重定向，它是用来告诉浏览器get请求的文件在缓存中，避免重新下载。\n7、移除重复脚本\n8、配置实体标签Etag\n9、使用ajax缓存\n       ajax的get和post方法：\n       只要是浏览器的get请求，浏览器都会使用缓存，对于同一地址的请求，服务器会发送304状态码到浏览器，浏览器就会使用缓存中的数据 post的请求每次都会被执行，浏览器不会缓存\n10、使用Gzip压缩\n11、使用CDN(内容分发网络)\n12、在css中避免expression表达式\n13、添加expire/cache-control头 \n                    "
  },
  {
    "question": "箭头函数与普通函数的区别",
    "answer": "箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种只包含一个表达式，连{ ... }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ ... }和return。\n箭头函数是匿名函数，不能作为构造函数，不能使用new\n箭头函数不绑定arguments，取而代之用rest参数...解决\nlet C = (...c) => { console.log(c);}\nC(3,82,32,11323);  // [3, 82, 32, 11323]\n箭头函数不绑定this，会捕获其所在的上下文的this值，作为自己的this值\n箭头函数通过 call()  或   apply() 方法调用一个函数时，只传入了一个参数，对 this 并没有影响。\n箭头函数没有原型属性\n箭头函数不能当做Generator函数,不能使用yield关键字"
  },
  {
    "question": "你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?",
    "answer": "1、一般都会在主流浏览器中进行测试,包括 IE,Chrome,Safari,Firefox 和 Opera. 内核:\n\n2、IE: trident 内核(1997 年的 IE4 中首次被采用,沿用至今.腾讯,猎豹,360 等浏览器都是用了 IE 的内核)\n\n3、Firefox:gecko 内核 (开源内核,因为火狐用户最多,被称为火狐内核,是一个跨平台内核,windows,linux 和 mac os 中可以使用)\n\n4、Chrome:Blink(基于 webkit,Google 与 Opera Software 共同开发) (2013 年之前是用 webkit)\n\n5、Safari:webkit 内核 (苹果公司的内核,开源代码,不受 IE,火狐限制. 遨游浏览器,塞班手机浏览器,安卓默认浏览器都是用\n\n6、webkit 作为内核.另外 google chrome ,360 极速浏览器和搜狗高速浏览器高速模式也使用 webkit 作为内核.)\n\n7、Opera:以前是 presto 内核(渲染速度达到极致,ie 内核速度的 3 倍,但是兼容性很差),Opera 现已改用 Google Chrome 的 Blink 内核\n\n8、未来:Mozilla 与三星也达成合作协议开发\"下一代\"浏览器渲染引擎 Servo. \n                    "
  },
  {
    "question": "Quirks 模式是什么？它和 Standards 模式有什么区别",
    "answer": "       从 IE6 开始，引入了 Standards 模式，标准模式中，浏览器尝试给符合标准的文档在规范上 的正确处理达到在指定浏览器中的程度。\n       在 IE6 之前 CSS 还不够成熟，所以 IE5 等之前的浏览器对 CSS 的支持很差， IE6 将对 CSS 提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如 果 IE6 支持 CSS 则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的 渲染机制呢？\n       在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能， 尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某 个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能 不破坏原有的程序，又提供新功能。IE6 也是类似这样做的，它将 DTD 当成了这个“参数”， 因为以前的页面大家都不会去写 DTD，所以 IE6 就假定 如果写了 DTD，就意味着这个页面 将采用对 CSS 支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是 Quirks 模式（怪癖模式，诡异模式，怪异模式）。\n       区别： 总体会有布局、样式解析和脚本执行三个方面的区别。\n       盒模型：在 W3C 标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度， 而在 Quirks 模式下，IE 的宽度和高度还包含了 padding 和 border。 设置行内元素的高宽：在 Standards 模式下，给等行内元素设置 wdith 和 height 都 不会生效，而在 quirks 模式下，则会生效。\n       设置百分比的高度：在 standards 模式下，一个元素的高度是由其包含的内容来决定的，如 果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用 margin:0 auto 设置水平居中：使用 margin:0 auto 在 standards 模式下可以使元素水平 居中，但在 quirks 模式下却会失效。\n                    "
  },
  {
    "question": "每个 HTML 文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？",
    "answer": "<!DOCTYPE> 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面） \n                    "
  }
]
